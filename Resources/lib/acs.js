// @autogenerated:start:ti.cloud.pps
//var pps = require("ti.cloud.pps");
// @autogenerated:end:ti.cloud.pps

var globalVariables = require('globalVariables');
var Cloud = require('ti.cloud');
var alert = require('lib/alert');
var db = require('/db/db');
var utility = require("lib/utilities");

var loggedIn = false;
//globalVariables.GV.sessionId = Ti.App.Properties.getString('sessionId',null);
//globalVariables.GV.userId = Ti.App.Properties.getString('userId', null);

// local utility variables
//var queryResults = [];

exports.getUsers = function(team_id, callback){
    var where = null;
    if(globalVariables.GV.userRole=="Admin"){
        where = {};
    }
    else if(globalVariables.GV.userRole=="Territory Manager"){
        where = {
            //sales_team: globalVariables.GV.team_id,
            tm_id: globalVariables.GV.userId
        };
    }
    else if(globalVariables.GV.userRole=="Sales Manager"){
        where = {
            //sales_team: globalVariables.GV.team_id,
            sm_id: globalVariables.GV.userId
        };
    }
    Cloud.Users.query({
        limit: 500,
        where: where
    }, function(e){
        if(e.success){
            db.fillUsers(e.users, function(f){
                callback({success: true});
            });
        }
    });
};

exports.loginUser = function(email, password, callback) {

	Cloud.Users.login({
		login : email,
		password : password
	}, function(e) {
		if (e.success) {
			var user = e.users[0];
			Ti.API.info("USER:   "+JSON.stringify(user));
			//Ti.API.error(Ti.App.Properties.setString.use);
			Ti.App.Properties.setString('lastname', user.last_name);
			globalVariables.GV.lastName = user.last_name;
			Ti.App.Properties.setString('firstname', user.first_name);
			globalVariables.GV.firstName = user.first_name;
			globalVariables.GV.repName = globalVariables.GV.firstName+' '+globalVariables.GV.lastName;
			Ti.App.Properties.setString('userId', user.id);
			globalVariables.GV.userId = user.id;
			Ti.App.Properties.setString('sessionId', Cloud.sessionId);
			globalVariables.GV.sessionId=Cloud.sessionId;//e.meta.session_id;
			Ti.App.Properties.setString('userRole', user.role);
			globalVariables.GV.userRole = user.role;
			Ti.API.info("SESSION ID IS:  " +Cloud.sessionId);
			globalVariables.GV.cloudSessionSet=true;
			globalVariables.GV.team_id = user.sales_team;
			Ti.App.Properties.setString('team_id', user.sales_team);
			globalVariables.GV.team_name = user.sales_team_name;
			Ti.App.Properties.setString('team_name', user.sales_team_name);
			// Ti.App.Properties.setBool("loggedIn",true);
			// globalVariables.GV.loggedIn=true;
			globalVariables.GV.proposalsViewFirstTime=true;
			globalVariables.GV.libraryViewFirstTime=true;
			globalVariables.GV.sm_id = user.custom_fields.sm_id;
			Ti.App.Properties.setString("sm_id", globalVariables.GV.sm_id);
			globalVariables.GV.tm_id = user.custom_fields.tm_id;
			Ti.App.Properties.setString("tm_id", globalVariables.GV.tm_id);
			if(globalVariables.GV.userRole=="Admin")
			{
				globalVariables.GV.acl_id = null;
			}
			else
			{
				globalVariables.GV.acl_id = user.custom_fields.acl_id;
			}
			Ti.App.Properties.setString("acl_id", globalVariables.GV.acl_id);
			
			if(user.custom_fields.neverLoggedIn)
			{
				//globalVariables.GV.lastFileSyncDate = 0;
				
				var t = Titanium.UI.create2DMatrix();
				t = t.scale(0);
	
				var w = Titanium.UI.createWindow({
					backgroundColor:'transparent',
					backgroundImage: "/images/iconGradientBG.png",
					borderWidth:1,
					borderColor:'#999',
					height:230,
					width:330,
					borderRadius:10,
					opacity:0.92,
					transform:t,
					layout: "vertical"
				});
	
				// create first transform to go beyond normal size
				var t1 = Titanium.UI.create2DMatrix();
				t1 = t1.scale(1.1);
				var a = Titanium.UI.createAnimation();
				a.transform = t1;
				a.duration = 200;
	
				// when this animation completes, scale to normal size
				a.addEventListener('complete', function()
				{
					Titanium.API.info('here in complete');
					var t2 = Titanium.UI.create2DMatrix();
					t2 = t2.scale(1.0);
					w.animate({transform:t2, duration:200});
			
				});
	
				// create a button to close window
				var tfNewPwd = Titanium.UI.createTextField({
					hintText: "New Password",
					height:30,
					width:"80%",
					top: 50,
					backgroundColor: "#fff",
					passwordMask: true
				});
				
				w.add(tfNewPwd);
				
				var tfNewPwdConf = Titanium.UI.createTextField({
					hintText: "Confirm Password",
					height:30,
					width:"80%",
					top: 20,
					backgroundColor: "#fff",
					passwordMask: true
				});
				
				w.add(tfNewPwdConf);
				
				var changeBtn = Ti.UI.createButton({
					title: "Change Password",
					height: 30,
					top: 20,
					color: "#0082b4",
					font:{
						fontSize: 25
					}
				});
				
				w.add(changeBtn);
				
				changeBtn.addEventListener('click', function()
				{
					var t3 = Titanium.UI.create2DMatrix();
					t3 = t3.scale(0);
					w.close({transform:t3,duration:300});
					if(tfNewPwd.value == tfNewPwdConf.value){
						changePwd({
							pwd: tfNewPwd.value
						}, function(f){
							if(f.success){
								// aclsmUpdate({
								    // user: user
								    // }, function(f){
								        callback({
								            success: true
								        });
								//});
							}
							else{
								alert.alert("Could not change password. You will be asked next time you log in. \n"+JSON.stringify(f));
								callback(f);
							}
						});
					}
					else{
						alert("Passwords don't match. Try again.");
						tfNewPwd.value="";
						tfNewPwdConf.value="";
					}
				});
			
				w.open(a);
			}
			else{
			    //call acsmUpdateFn
			    // aclsmUpdate({
                    // user: user
                    // }, function(f){
                        callback({
                            success: true
                        });
                //});
			}
		}
		else{
            callback(e);
        }
    });

};
		
function aclsmUpdate(params, callback){		
    var user = params.user;
    var aclFixed=null;
	var smtmFixed=null;
				
	if(user.custom_fields.aclBugFixed==false||user.custom_fields.aclBugFixed==null)
	{
	    db.insertAclBugFix(function(f){
	        
	        if(!f.success){
	            //alert(f.message+"\n Permissions were not patched due to error in Database. Please logout and login in again.");
	            callback({
                    success: false,
                    message: f.message+"\n Permissions were not patched due to error in Database. Please logout and login in again."
                });
	        }
	        else{
	            aclFixed=true;
	            Cloud.Users.update({
                    custom_fields:{
                        aclBugFixed: true
                    }
                }, function(g){
                    if(g.success)
                    {
                        if(user.custom_fields.smtmBugFixed==false||user.custom_fields.smtmBugFixed==null)
                        {
                            db.insertSmTmBugFix(function(h){
                                if(!h.success){
                                    alert(h.message+"\n Sales Manager Permissions were not patched due to error in Database. Please logout and login in again.");
                                }
                                else{
                                    smtmFixed=true;
                                    //if(user.custom_fields.smtmBugFixed==null)
                                    Cloud.Users.update({
                                        custom_fields:{
                                            smtmBugFixed: true
                                        }
                                    }, function(j){
                                        if(j.success)
                                        {
                                            
                            		          aclFixed=null;
                            				  smtmFixed=null;
                            				  callback({
                            				      success: true
                            				  });
                            				
                            			}
                            			else{
                            			    //alert(j.message+"\n SMTM Patch confirmation was not applied in ACS. Please logout and login in again.");
                            			    callback({
                                                success: false,
                                                message: j.message+"\n SMTM Patch confirmation was not applied in ACS. Please logout and login in again."
                                            });
                            			}
                                    });
                                }
                            });
                        }
                    }
                    else{
                        callback({
                            success: false,
                            message: j.message+"\n ACL Patch confirmation was not applied in ACS. Please logout and login in again."
                        });
                        //alert(g.message+"\n ACL Patch confirmation was not applied in ACS. Please logout and login in again.");
                    }
                });
	        }
	    });
	}
	else if(user.custom_fields.smtmBugFixed==false||user.custom_fields.smtmBugFixed==null)
    {
        db.insertSmTmBugFix(function(f){
            if(!f.success){
                //alert(f.message+"\n Sales Manager Permissions were not patched due to error in Database. Please logout and login in again.");
                callback({
                    success: false,
                    message: j.message+"\n Sales Manager Permissions were not patched due to error in Database. Please logout and login in again.."
                });
            }
            else{
                smtmFixed=true;
                //if(user.custom_fields.smtmBugFixed==null)
                Cloud.Users.update({
                    custom_fields:{
                        smtmBugFixed: true
                    }
                }, function(g){
                    if(g.success)
                    { 
                        smtmFixed=null;
                        callback({
                            success: true
                        });
                    }
                    else{
                        //alert(g.message+"\n SMTM Patch confirmation was not applied in ACS. Please logout and login in again.");
                        callback({
                            success: false,
                            message: g.message+"\n SMTM Patch confirmation was not applied in ACS. Please logout and login in again."
                        });
                    }
                });
            }
        });
    }
    else{
        //no update needed.
        callback({
            success: true
        });
    }
	    
};
	
// else{
	// var aclFixed=null;
    // var smtmFixed=null;
//     
    // if(user.custom_fields.aclBugFixed==false||user.custom_fields.aclBugFixed==null)
    // {
        // db.insertAclBugFix(function(f){
//             
            // if(!f.success){
                // alert(f.message+"\n Permissions were not patched due to error in Database. Please logout and login in again.");
            // }
            // else{
                // aclFixed=true;
                // Cloud.Users.update({
                    // custom_fields:{
                        // aclBugFixed: true
                    // }
                // }, function(g){
                    // if(g.success)
                    // {
                        // if(user.custom_fields.smtmBugFixed==false||user.custom_fields.smtmBugFixed==null)
                        // {
                            // db.insertSmTmBugFix(function(h){
                                // if(!h.success){
                                    // alert(h.message+"\n Sales Manager Permissions were not patched due to error in Database. Please logout and login in again.");
                                // }
                                // else{
                                    // smtmFixed=true;
                                    // Cloud.Users.update({
                                        // custom_fields:{
                                            // smtmBugFixed: true
                                        // }
                                    // }, function(j){
                                        // if(j.success)
                                        // {
                                            // aclFixed=null;
                                            // smtmFixed=null;
                                            // callback({
                                                // success: true
                                            // });
                                        // }
                                        // else{
                                            // alert(j.message+"\n SMTM Patch confirmation was not applied in ACS. Please logout and login in again.");
                                        // }
                                    // });
                                // }
                            // });
                        // }
                        // else{
                            // callback(g);
                        // }
                    // }
                    // else{
                        // alert(g.message+"\n ACL Patch confirmation was not applied in ACS. Please logout and login in again.");
                    // }
                // });
            // }
        // });
    // }
    // else if(user.custom_fields.smtmBugFixed==false||user.custom_fields.smtmBugFixed==null)
    // {
        // db.insertSmTmBugFix(function(f){
            // if(!f.success){
                // alert(f.message+"\n Sales Manager Permissions were not patched due to error in Database. Please logout and login in again.");
            // }
            // else{
                // smtmFixed=true;
                // //if(user.custom_fields.smtmBugFixed==null)
                // Cloud.Users.update({
                    // custom_fields:{
                        // smtmBugFixed: true
                    // }
                // }, function(g){
                    // if(g.success)
                    // {
                        // callback({
                            // success: true
                        // });
                    // }
                    // else{
                        // alert(g.message+"\n SMTM Patch confirmation was not applied in ACS. Please logout and login in again.");
                        // }
                    // });
                // }
            // });
        // }
        // else{
            // callback(e);
        // }
  // }

		
		

function changePwd(params,callback){
	Cloud.Users.update({
		password: params.pwd,
		password_confirmation: params.pwd,
		custom_fields:{
			neverLoggedIn: false
		}
	}, function(e){
		callback(e);
	});
};

exports.logoutUser = function(callback){
	Cloud.Users.logout(function(e){
		if(e.success){
			Ti.App.Properties.setString('lastname', null);
			globalVariables.GV.lastName = null;
			Ti.App.Properties.setString('firstname', null);
			globalVariables.GV.firstName = null;
			Ti.App.Properties.setString('userId', null);
			globalVariables.GV.userId =null;
			Ti.App.Properties.setString('sessionId', null	);
			globalVariables.GV.sessionId=null;
			Ti.App.Properties.setString('userRole', null);
			globalVariables.GV.userRole = null;
			Ti.App.Properties.setBool("loggedIn", false);
			globalVariables.GV.loggedIn = false;
			globalVariables.GV.cloudSessionSet = false;
			globalVariables.GV.sm_id = null;
			Ti.App.Properties.setString("sm_id", null);
			globalVariables.GV.tm_id = null;
			Ti.App.Properties.setString("tm_id", null);
			globalVariables.GV.acl_id = null;
			Ti.App.Properties.setString("acl_id", null);
			callback();
		}
		else{
			alert.alert('ERROR', e.message);
		}
	});
};

// function queryProposals(date,queryResults,callbak){
	// var queryParams=null;
	// if(globalVariables.GV.lastProposalSyncDate==0)
	// {
// 		
	// }
// }

exports.getProposalById = function(propId, callback){
     Cloud.Objects.show({
         classname : 'Proposal',
         id: propId
     }, function(e){
         if(e.success){
             callback({
                 success: true,
                 results: e.Proposal[0]
             });
         }
         else{
             callback({
                 success: false,
                 results: e
             });
         }
     });
};

exports.queryProposalsByUid = function(params, callback) {
	
	var d=null;
	var searchDate = globalVariables.GV.lastProposalSyncDate;
	var searchParams = null;
	// if(params.getUpdates){
// 	    
    	// if(globalVariables.GV.lastProposalSyncDate==0){
    		// d=new Date("January 1, 2014 00:00:00");
    		// searchDate = d.toISOString();
    	// }
    	// searchParams = {
	        // user_id: globalVariables.GV.userId,
            // updated_at: {"$gt": searchDate},
            // Deleted: 0
	    // };
	    // Ti.API.info("INSIDE OF queryProposalByUid");
    // }
    // else{
        searchParams = {
            user_id: params.user_id,
            Deleted: 0,
            //order: "updated_at"
        };
    //}
    	Cloud.Objects.query({
    		classname : 'Proposal',
    		//page : 1,
    		//per_page : 10,
    	    limit: 1000,
    	    order: "-updated_at",
    		where: searchParams//{
    			// user_id: globalVariables.GV.userId,
    			// updated_at: {"$gt": searchDate},
    			// Deleted: 0
    		// }
    	}, function(e) {
    		Ti.API.debug("queryProposal by UID Results: " + JSON.stringify(e));
    		if (e.success) {
    			// if(params.getUpdates){
    				// db.getAllLastDates(function(f){
    					// var changedArray = [];
    					// var moment=require("/lib/moment");
    					// for(var i=0;i<f.results.length;i++){
    						// var j=0;
    						// var found=false;
    						// while(!found && j<e.Proposal.length){
    							// if(e.Proposal[j].id==f.results[i].ProposalId){
    								// var remoteDate = moment(e.Proposal[j].updated_at);  ///CHANGE THIS BACK TO LASTUPDATED
    								// var localDate = moment(f.results[i].LastUpdated);
    								// if(remoteDate>localDate)
    								// {
    									// changedArray.push(e.Proposal[j]);
    								// }
    								// found=true;
    							// }
    							// j++;
    						// }
    					// }
    					// moment=null;
    					// callback({
    						// success: true,
    						// results: changedArray
    					// });
    				// });
    			// }
    			// else{
    				callback({
    					success: true,
    					results:e.Proposal
    				});
    			//}
    		} else {
    			callback({
    				success: false,
    				results: e
    			});
    			// alert.alert('Error:\n' + ((e.error && e.message) || JSON.stringify(e)));
    		}
    	});
                                                                               
};

exports.queryProposalsBySmid = function(params,callback) {
	//var key=params.key.valueOf();
	//var value=params.value;
	//Ti.API.info(key+": "+value);
	var d=null;
    var searchDate = globalVariables.GV.lastProposalSyncDate;
	var searchParams = null;
	
	if(params.getUpdates){
        
        if(globalVariables.GV.lastProposalSyncDate==0){
            d=new Date("January 1, 2014 00:00:00");
            searchDate = d.toISOString();
        }
        searchParams = {
            sm_id: globalVariables.GV.userId,
            updated_at: {"$gt": searchDate},
            Deleted: 0
        };
        Ti.API.info("INSIDE OF queryProposalBySmid: "+globalVariables.GV.lastProposalSyncDate);
    }
    else{
        searchParams = {
            sm_id: globalVariables.GV.userId,
            Deleted: 0
        };
    }
	
	Cloud.Objects.query({
		classname : 'Proposal',
		//page : 1,
		//per_page : 10,
		limit: 1000,
		where: searchParams,//{
			// sm_id: globalVariables.GV.userId,
			// Deleted: 0
		// }
	}, function(e) {
		Ti.API.info("queryProposal by sm_ID Results: " + JSON.stringify(e));
		if (e.success) {
			if(params.getUpdates){
				db.getAllLastDates(function(f){
					var changedArray = [];
					var moment=require("/lib/moment");
					for(var i=0;i<f.results.length;i++){
						var j=0;
						var found=false;
						while(!found && j<e.Proposal.length){
							if(e.Proposal[j].id==f.results[i].ProposalId){
								var remoteDate = moment(e.Proposal[j].updated_at);  ///CHANGE THIS BACK TO LASTUPDATED
                                var localDate = moment(f.results[i].LastUpdated);
								if(remoteDate>localDate)
								{
									changedArray.push(e.Proposal[j]);
								}
								found=true;
							}
							j++;
						}
					}
					callback({
						success: true,
						results: changedArray
					});
				});
			}
			else{
				callback({
					success: true,
					results:e.Proposal
				});
			}
		} else {
			callback({
				success: false,
				results: e
			});
			// alert.alert('Error:\n' + ((e.error && e.message) || JSON.stringify(e)));
		}
	});
};

exports.queryProposalsByTmid = function(params, callback) {
	//var key=params.key.valueOf();
	//var value=params.value;
	//Ti.API.info(key+": "+value);
	var d=null;
    var searchDate = globalVariables.GV.lastProposalSyncDate;
	var searchParams = null;
    
    if(params.getUpdates){
        
        if(globalVariables.GV.lastProposalSyncDate==0){
            d=new Date("January 1, 2014 00:00:00");
            searchDate = d.toISOString();
        }
        searchParams = {
            tm_id: globalVariables.GV.userId,
            updated_at: {"$gt": searchDate},
            Deleted: 0
        };
        Ti.API.info("INSIDE OF queryProposalByTmid");
    }
    else{
        searchParams = {
            tm_id: globalVariables.GV.userId,
            Deleted: 0
        };
    }
    
	Cloud.Objects.query({
		classname : 'Proposal',
		//page : 1,
		//per_page : 10,
		limit: 1000,
		where:searchParams,//{
			// tm_id: globalVariables.GV.userId,
			// Deleted: 0
		// }
	}, function(e) {
		Ti.API.debug("queryProposal by tm_ID Results: " + JSON.stringify(e));
		if (e.success) {
			if(params.getUpdates){
				db.getAllLastDates(function(f){
					var changedArray = [];
					var moment=require("/lib/moment");
					for(var i=0;i<f.results.length;i++){
						var j=0;
						var found=false;
						while(!found && j<e.Proposal.length){
							if(e.Proposal[j].id==f.results[i].ProposalId){
								var remoteDate = moment(e.Proposal[j].updated_at);  ///CHANGE THIS BACK TO LASTUPDATED
                                var localDate = moment(f.results[i].LastUpdated);
								if(remoteDate>localDate)
								{
									changedArray.push(e.Proposal[j]);
									found=true;
								}
							}
							j++;
						}
					}
					callback({
						success: true,
						results: changedArray
					});
				});
			}
			else{
				callback({
					success: true,
					results:e.Proposal
				});
			}
		} else {
			callback({
				success: false,
				results: e
			});
			// alert.alert('Error:\n' + ((e.error && e.message) || JSON.stringify(e)));
		}
	});
};

exports.getPartners = function(callback){
	Cloud.Objects.query({
		classname: 'ReferralPartner'
	}, function(e){
		if(e.success){
			callback({
				success: true,
				results: e.ReferralPartner
			});
		}
		else{
			callback({
				success: false,
				results: e
			});
		}
	});
};

exports.queryAllProposals = function(params,callback) {
	//var key=params.key.valueOf();
	//var value=params.value;
	//Ti.API.info(key+": "+value);
	var queryResults=[];
	//var currentIndex = 0;
	//var dataReturned = false;
	var changedArray = [];
	var totalResults=0;
	var failedACS=false;
	//var skip = 0;
	
	Cloud.Objects.query({
        classname : 'Proposal',
        //skip : skip || 0,
        //per_page : 100,
        where:{
            user_id: globalVariables.GV.userId,
            Deleted: 0
        },
        limit: 500
    }, function(f){
        queryResults = queryResults.concat(f.Proposal);
        //currentIndex=currentIndex+f.Proposal.length;
        //dataReturned=true;
        totalResults=f.meta.total_results;
        // while(currentIndex<f.meta.total_results&&!failedACS)
        // {
            
    	function recursiveQueryAll(currentIndex)
        {
            
            if(currentIndex<totalResults)
            { 
                // var currentIndexBefore = currentIndex;
                // if(dataReturned)
                // {
                Cloud.Objects.query({
                    classname : 'Proposal',
                    skip: currentIndex,
                    //per_page : 100,
                    where:{
                        user_id: globalVariables.GV.userId,
                        Deleted: 0
                    },
                    limit: 500
                }, function(e) {
                    if (e.success)
                    {
                        queryResults = queryResults.concat(e.Proposal);
                        currentIndex=currentIndex+e.Proposal.length;
                        //dataReturned=true;
                        // if(currentIndex<e.meta.total_results){
                        recursiveQueryAll(currentIndex);
                        // }
                        // else{
                    }
                    else{
                        failedACS=true;
                        //dataReturned=false;
                        recursiveQueryAll(totalResults);
                    }
                });
            }
            else{
                if(failedACS){
                    callback({
                        success: false,
                        results: e
                    });
                }
                else if(params.getUpdates){
                    db.getAllLastDates(function(g){
                    // var changedArray = [];
                        var moment=require("/lib/moment");
                        for(var i=0;i<g.results.length;i++){
                            var j=0;
                            var found=false;
                            while(!found && j<totalResults){
                                if(queryResults[j].id==g.results[i].ProposalId){
                                    var remoteDate = moment(queryResults[j].updated_at);
                                    var localDate = moment(g.results[i].LastUpdated);
                                    if(remoteDate>localDate)
                                    {
                                        changedArray.push(queryResults[j]);
                                    }
                                    found=true;
                                }
                                j++;
                            }
                        }
                    
                        callback({
                            success: true,
                            results: changedArray
                        });
                    });
                }
                else{
                    //total=e.meta.total_results;
                    callback({
                        success: true,
                        results:queryResults,
                        //currentIndex: currentIndex,
                        total: f.meta.total_results
                    });
                 
                }
            }
            // if(currentIndexBefore==currentIndex){
                // dataReturned=false;
            // }
            // else{
                // dataReturned=true;
            // }
        }
        
        if(totalResults>queryResults.length){
            recursiveQueryAll(500);    
        }
        else{
            //total=e.meta.total_results;
            callback({
                success: true,
                results:queryResults,
                //currentIndex: currentIndex,
                total: f.meta.total_results
            });
         
        }
        
        
        
    });
            // }
            // else {
                // failedACS = {
                    // success: true,
                    // results: e
                // };
                // // callback({
                    // // success: false,
                    // // results: e
                // // });
                // //alert.alert('Error:\n' + ((e.error && e.message) || JSON.stringify(e)));
            // }
        // });
    // }
//     
    // recursiveQueryAll(0);
//     
    // if(failedACS.success){
        // callback({
            // success: false,
            // results: e
        // });
    // }
    // else if(params.getUpdates){
        // callback({
            // success: true,
            // results: changedArray
        // });   
    // }
    // else{
        // callback({
            // success: true,
            // results: queryResults,
            // total: total
        // });
    // }
    
};
        // }
        // else{
            // alert("Error:  \\n"+ ((e.error && e.message) || JSON.stringify(e)));
        // }
    // });
// }
	// Cloud.Objects.query({
		// classname : 'Proposal',
		// skip : currentIndex,
		// //per_page : 100,
		// // where:{
			// // user_id: value
		// // }
		// limit: 500
	// }, function(e) {
		// if (e.success)
		 // {
			// if(params.getUpdates){
				// db.getAllLastDates(function(f){
					// var changedArray = [];
					// var moment=require("/lib/moment");
					// for(var i=0;i<f.results.length;i++){
						// var j=0;
						// var found=false;
						// while(!found && j<e.Proposal.length){
							// if(e.Proposal[j].id==f.results[i].ProposalId){
								// var remoteDate = moment(e.Proposal[j].updated_at);
                                // var localDate = moment(f.results[i].LastUpdated);
								// if(remoteDate>localDate)
								// {
									// changedArray.push(e.Proposal[j]);
								// }
								// found=true;
							// }
							// j++;
						// }
					// }
// 					
					// callback({
						// success: true,
						// results: changedArray
					// });
				// });
			// }
			// else{
			    // currentIndex = e.currentIndex;
                        // total = e.total;
                        // while(currentIndex<total){
                              // acs.queryAllProposals({
                                  // skip: e.currentIndex
                              // },function(d){
                                  // currentIndex=d.currentIndex;
                              // });
                        // }
				// currentIndex = currentIndex + e.Proposal.length;
				// callback({
					// success: true,
					// results:e.Proposal,
					// currentIndex: currentIndex,
					// total: e.meta.total_results
				// });
			// }
		// } else {
			// callback({
				// success: false,
				// results: e
			// });
			// //alert.alert('Error:\n' + ((e.error && e.message) || JSON.stringify(e)));
		// }
	// });
// };




exports.downloadRemoteProposals = function(params, callback){
	var conditions=null;
	Ti.API.info("LAST CREATED DATE:  "+params.lastCreatedDate);
	// if(globalVariables.GV.userRole=="Admin"){
		Cloud.Objects.query({
			classname : 'Proposal',
			limit: 1000,
			//id: {'$nin':params.localProposals},
			where: {
				//id: {'$nin':params.localProposals},
				Deleted: 0,
				created_at: {"$gt": params.lastCreatedDate},
				user_id: globalVariables.GV.userId
				//"order": "-updated_at"
			}
		}, function(e){
				Ti.API.debug("queryProposal Results: " + JSON.stringify(e));
				if (e.success) {
					Ti.API.info("downloadRemoteProposals Results: " + JSON.stringify(e));
					//alert.alert('Success:\n' + 'Count: ' + e.Proposal[0].BusinessName);
					callback({
						success: e.success,
						results:e.Proposal
					});
				} else {
					callback({
						success: false,
						results: e
					});
					//alert.alert('Error:\n' + ((e.error && e.message) || JSON.stringify(e)));
				}
		});
	// }
	// else if(globalVariables.GV.userRole == "Sales Manager"){
		// Cloud.Objects.query({
			// classname : 'Proposal',
			// limit: 1000,
			// //id: {"$nin":params.localProposals},
			// where: {
				// sm_id: globalVariables.GV.userId,
				// Deleted: 0,
				// created_at: {"$gt": params.lastCreatedDate}
			// }
		// }, function(e){
			// Ti.API.debug("queryProposal Results: " + JSON.stringify(e));
			// if (e.success) {
				// Ti.API.info("downloadRemoteProposals Results: " + JSON.stringify(e));
				// //alert.alert('Success:\n' + 'Count: ' + e.Proposal[0].BusinessName);
				// callback({
					// success: e.success,
					// results:e.Proposal
				// });
			// } else {
				// callback({
					// success: false,
					// results: e
			    // });
			// }
		// });
	// }
	// else if (globalVariables.GV.userRole == "Territory Manager"){
		// Cloud.Objects.query({
			// classname : 'Proposal',
			// limit: 1000,
			// where: {
				// tm_id: globalVariables.GV.userId,
				// Deleted: 0,
				// created_at: {"$gt": params.lastCreatedDate}
			// }
		// }, function(e){
			// Ti.API.debug("queryProposal Results: " + JSON.stringify(e));
			// if (e.success) {
				// Ti.API.info("downloadRemoteProposals Results: " + JSON.stringify(e));
				// //alert.alert('Success:\n' + 'Count: ' + e.Proposal[0].BusinessName);
				// callback({
					// success: e.success,
					// results:e.Proposal
				// });
			// } else {
				// callback({
					// success: false,
					// results: e
			    // });
			// }
		// });
	// }
	// else{
		// Cloud.Objects.query({
		// classname : 'Proposal',
		// limit: 1000,
		// where: {
			// user_id: globalVariables.GV.userId,
			// Deleted: 0,
			// created_at: {"$gt": params.lastCreatedDate}
		// }
		// }, function(e){
			// Ti.API.debug("queryProposal Results: " + JSON.stringify(e));
			// if (e.success) {
				// Ti.API.info("downloadRemoteProposals Results: " + JSON.stringify(e));
				// //alert.alert('Success:\n' + 'Count: ' + e.Proposal[0].BusinessName);
				// callback({
					// success: e.success,
					// results:e.Proposal
				// });
			// } else {
				// callback({
						// success: false,
						// results: e
				// });
			// }
		// });
	// }	
};

exports.getDeletedFileIds = function(callback){
	Cloud.Objects.query({
		classname: "deletedLibraryFiles",
		skip: 0,
		limit: 1000,
		where: {
			created_at: {"$gt": globalVariables.GV.lastFileSyncDate}
		}},
		function(e){		
			if(e.success){
				callback({
					results: e.deletedLibraryFiles	
				});
			}
	});
};

exports.getDeletedIds = function(params, callback){
    Ti.API.info("entering getDeletedIds");
    Cloud.Objects.query({
        classname : 'Proposal',
        skip: 0,
        limit: 1000,
        where: {
            Deleted: 1
            //id: {"$in": params.localProposals}
        }
        },function(e){
            if(e.success){
                //Ti.API.info(JSON.stringify(e));
                var propIds = [];
                for(var i=0;i<e.Proposal.length;i++)
                {
                    propIds.push(e.Proposal[i].id);
                }
                callback({
                    success: true,
                    results:e.Proposal
                }); 
            }else {
                Ti.API.error(JSON.stringify(e));
                callback({
                        success: false,
                        results: e
                });
            }
    });
};

exports.getReassignedIds = function(params, callback){
	Ti.API.info("ENTERING  getReassignedIDs");
	var localProps = params.localProposals;
	Cloud.Objects.query({
        classname : 'Proposal',
        skip: 0,
        limit: 1000,
        where: {
            //Deleted: 1
            id: {"$in": localProps}
        }
        },function(e){
            if(e.success){
                //Ti.API.info(JSON.stringify(e));
                var propIds = [];
                var returnIds = [];
                for(var i=0;i<e.Proposal.length;i++){
                	propIds.push(e.Proposal[i].id);
                }
                for(var i=0;i<localProps.length;i++)
                {
                    if(propIds.indexOf(localProps[i])==-1){
                    	returnIds.push(localProps[i]);
                    }
                }
                callback({
                    success: true,
                    results:returnIds
                }); 
            }else {
                Ti.API.info(JSON.stringify(e));
                callback({
                        success: false,
                        results: e
                });
            }
    });
};

exports.createProposal = function(params,callback) {	
	// var smid=" ";
	// var tmid=" ";
	// if(globalVariables.GV.userRole=="Sales Manager"){
		// smid=globalVariables.GV.userId;
	// }
	// else if(globalVariables.GV.userRole=="Territory Manager")
	// {
		// tmid=globalVariables.GV.userId;
		// smid=globalVariables.GV.sm_id;
	// }
	// else if(globalVariables.GV.userRole=="Account Executive"){
		// tmid=globalVariables.GV.tm_id;
		// smid=globalVariables.GV.sm_id;
	// }
	
	if(params)
	{
		var row = params.row;
		Cloud.Objects.create({
			//session_id: globalVariables.GV.sessionId,
			classname : 'Proposal',
			acl_id: row.acl_id,
			fields : {
				BusinessName : row.BusinessName,
				StreetAddress : row.StreetAddress,
				State : row.State,
				City : row.City,
				Zip : row.Zip,
				Contact : row.Contact,
				Phone : row.Phone,
				BusinessType: row.BusinessType,
				ProcessingMonths : row.ProcessingMonths,
				debitVol : parseFloat(row.debitVol).toFixed(2),
                aeVol : parseFloat(row.aeVol).toFixed(2),
                dsVol : parseFloat(row.dsVol).toFixed(2),
                mcVol : parseFloat(row.mcVol).toFixed(2),
                visaVol : parseFloat(row.visaVol).toFixed(2),
				debitTransactions : row.debitTransactions,
				aeTransactions : row.aeTransactions,
				dsTransactions : row.dsTransactions,
				mcTransactions : row.mcTransactions,
				visaTransactions : row.visaTransactions,
				debitAverageTicket : parseFloat(row.debitAverageTicket).toFixed(2),
                aeAverageTicket : parseFloat(row.aeAverageTicket).toFixed(2),
                dsAverageTicket : parseFloat(row.dsAverageTicket).toFixed(2),
                mcAverageTicket : parseFloat(row.mcAverageTicket).toFixed(2),
                visaAverageTicket : parseFloat(row.visaAverageTicket).toFixed(2),
                TotalCurrentFees : parseFloat(row.TotalCurrentFees).toFixed(2),
                CurrentEffectiveRate : parseFloat(row.CurrentEffectiveRate).toFixed(2),
                debitInterchangeFees : parseFloat(row.debitInterchangeFees).toFixed(2),
                aeInterchangeFees : parseFloat(row.aeInterchangeFees).toFixed(2),
                dsInterchangeFees : parseFloat(row.dsInterchangeFees).toFixed(2),
                mcInterchangeFees : parseFloat(row.mcInterchangeFees).toFixed(2),
                visaInterchangeFees : parseFloat(row.visaInterchangeFees).toFixed(2),
                debitProcessingFees : parseFloat(row.debitProcessingFees).toFixed(2),
                aeProcessingFees : parseFloat(row.aeProcessingFees).toFixed(2),
                dsProcessingFees : parseFloat(row.dsProcessingFees).toFixed(2),
                mcProcessingFees : parseFloat(row.mcProcessingFees).toFixed(2),
                visaProcessingFees : parseFloat(row.visaProcessingFees).toFixed(2),
                debitCardFees : parseFloat(row.debitCardFees).toFixed(2),
                aeCardFees : parseFloat(row.aeCardFees).toFixed(2),
                dsCardFees : parseFloat(row.dsCardFees).toFixed(2),
                mcCardFees : parseFloat(row.mcCardFees).toFixed(2),
                visaCardFees : parseFloat(row.visaCardFees).toFixed(2),
                TotalNewFees : parseFloat(row.TotalNewFees).toFixed(2),
                NewEffectiveRate : parseFloat(row.NewEffectiveRate).toFixed(2),
                MonthlySavings : parseFloat(row.MonthlySavings).toFixed(2),
                Year1Savings : parseFloat(row.Year1Savings).toFixed(2),
                Year2Savings : parseFloat(row.Year2Savings).toFixed(2),
                Year3Savings : parseFloat(row.Year3Savings).toFixed(2),
                Year4Savings : parseFloat(row.Year4Savings).toFixed(2),
                ProcessingFee : parseFloat(row.ProcessingFee),
                AuthFee : parseFloat(row.AuthFee),
                PinDebitProcessingFee : parseFloat(row.PinDebitProcessingFee),
                PinDebitAuthFee : parseFloat(row.PinDebitAuthFee),
                MonthlyServiceFee : parseFloat(row.MonthlyServiceFee),
                IndustryComplinceFee : parseFloat(row.IndustryComplinceFee),
                TerminalFee : parseFloat(row.TerminalFee),
                MXGatewayFee : parseFloat(row.MXGatewayFee),
                DebitAccessFee : parseFloat(row.DebitAccessFee),
				//timeId: row.timeId,
				Notes: row.Notes,
				//LastUpdated: row.LastUpdated,
				//DateCreated: new Date(row.DateCreated).toISOString(),
				ProposalStatus: row.ProposalStatus,
				rpID: row.rpID,
				sm_id: row.sm_id,
				tm_id: row.tm_id,
				Deleted: 0
			}

		}, function(e) {
			if (e.success) {
				//globalVariables.GV.ProposalId = e.Proposal.id;
				//alert.alert("Success", "Created Successfully");
				Ti.API.info("PROPOSAL CUSTOM OBJECT:  \n" + JSON.stringify(e));				
				callback({success: true, 
					proposalId: e.Proposal[0].id,
					proposal: e.Proposal[0]
					//timeId: e.Proposal[0].timeId
				});
			} else {
				callback({success: false,
				          message: 'Error creating proposal: \n' + JSON.stringify(e)
				});
				//alert.alert('Error creating proposal: \n', JSON.stringify(e));
			}
		});
	}
	else{
		Cloud.Objects.create({
			//session_id: globalVariables.GV.sessionId,
			classname : 'Proposal',
			acl_id: globalVariables.GV.acl_id,
			fields : {
				BusinessName : globalVariables.GV.BusinessName,
				StreetAddress : globalVariables.GV.StreetAddress,
				State : globalVariables.GV.State,
				City : globalVariables.GV.City,
				Zip : globalVariables.GV.Zip,
				Contact : globalVariables.GV.Contact,
				Phone : globalVariables.GV.Phone,
				BusinessType: globalVariables.GV.BusinessType,
				ProcessingMonths : globalVariables.GV.ProcessingMonths,
				debitVol : parseFloat(globalVariables.GV.debitVol).toFixed(2),
                aeVol : parseFloat(globalVariables.GV.aeVol).toFixed(2),
                dsVol : parseFloat(globalVariables.GV.dsVol).toFixed(2),
                mcVol : parseFloat(globalVariables.GV.mcVol).toFixed(2),
                visaVol : parseFloat(globalVariables.GV.visaVol).toFixed(2),
				debitTransactions : globalVariables.GV.debitTransactions,
				aeTransactions : globalVariables.GV.aeTransactions,
				dsTransactions : globalVariables.GV.dsTransactions,
				mcTransactions : globalVariables.GV.mcTransactions,
				visaTransactions : globalVariables.GV.visaTransactions,
				debitAverageTicket : parseFloat(globalVariables.GV.debitAverageTicket).toFixed(2),
                aeAverageTicket : parseFloat(globalVariables.GV.aeAverageTicket).toFixed(2),
                dsAverageTicket : parseFloat(globalVariables.GV.dsAverageTicket).toFixed(2),
                mcAverageTicket : parseFloat(globalVariables.GV.mcAverageTicket).toFixed(2),
                visaAverageTicket : parseFloat(globalVariables.GV.visaAverageTicket).toFixed(2),
                TotalCurrentFees : parseFloat(globalVariables.GV.TotalCurrentFees).toFixed(2),
                CurrentEffectiveRate : parseFloat(globalVariables.GV.CurrentEffectiveRate).toFixed(2),
                debitInterchangeFees : parseFloat(globalVariables.GV.debitInterchangeFees).toFixed(2),
                aeInterchangeFees : parseFloat(globalVariables.GV.aeInterchangeFees).toFixed(2),
                dsInterchangeFees : parseFloat(globalVariables.GV.dsInterchangeFees).toFixed(2),
                mcInterchangeFees : parseFloat(globalVariables.GV.mcInterchangeFees).toFixed(2),
                visaInterchangeFees : parseFloat(globalVariables.GV.visaInterchangeFees).toFixed(2),
                debitProcessingFees : parseFloat(globalVariables.GV.debitProcessingFees).toFixed(2),
                aeProcessingFees : parseFloat(globalVariables.GV.aeProcessingFees).toFixed(2),
                dsProcessingFees : parseFloat(globalVariables.GV.dsProcessingFees).toFixed(2),
                mcProcessingFees : parseFloat(globalVariables.GV.mcProcessingFees).toFixed(2),
                visaProcessingFees : parseFloat(globalVariables.GV.visaProcessingFees).toFixed(2),
                debitCardFees : parseFloat(globalVariables.GV.debitCardFees).toFixed(2),
                aeCardFees : parseFloat(globalVariables.GV.aeCardFees).toFixed(2), 
                dsCardFees : parseFloat(globalVariables.GV.dsCardFees).toFixed(2),
                mcCardFees : parseFloat(globalVariables.GV.mcCardFees).toFixed(2),
                visaCardFees : parseFloat(globalVariables.GV.visaCardFees).toFixed(2),
                TotalNewFees : parseFloat(globalVariables.GV.TotalNewFees).toFixed(2),
                NewEffectiveRate : parseFloat(globalVariables.GV.NewEffectiveRate).toFixed(2),
                MonthlySavings : parseFloat(globalVariables.GV.MonthlySavings).toFixed(2),
                Year1Savings : parseFloat(globalVariables.GV.Year1Savings).toFixed(2),
                Year2Savings : parseFloat(globalVariables.GV.Year2Savings).toFixed(2),
                Year3Savings : parseFloat(globalVariables.GV.Year3Savings).toFixed(2),
                Year4Savings : parseFloat(globalVariables.GV.Year4Savings).toFixed(2),
                ProcessingFee : parseFloat(globalVariables.GV.ProcessingFee),
                AuthFee : parseFloat(globalVariables.GV.AuthFee),
                PinDebitProcessingFee : parseFloat(globalVariables.GV.PinDebitProcessingFee),
                PinDebitAuthFee : parseFloat(globalVariables.GV.PinDebitAuthFee),
                MonthlyServiceFee : parseFloat(globalVariables.GV.MonthlyServiceFee),
                IndustryComplinceFee : parseFloat(globalVariables.GV.IndustryComplinceFee),
                TerminalFee : parseFloat(globalVariables.GV.TerminalFee),
                MXGatewayFee : parseFloat(globalVariables.GV.MXGatewayFee),
                DebitAccessFee : parseFloat(globalVariables.GV.DebitAccessFee),
				//timeId: globalVariables.GV.timeId,
				Notes: globalVariables.GV.Notes,
				//LastUpdated: globalVariables.GV.LastUpdated,
				//DateCreated: new Date(globalVariables.GV.DateCreated).toISOString(),
				ProposalStatus: globalVariables.GV.ProposalStatus,
				rpID: globalVariables.GV.rpID,
				sm_id: globalVariables.GV.sm_id,
				tm_id: globalVariables.GV.tm_id,
				Deleted: 0
			}

		}, function(e) {
			if (e.success) {
				globalVariables.GV.ProposalId = e.Proposal[0].id;
				alert.alert("Success", "Created Successfully");
				callback({success: true,
					proposalId: e.Proposal[0].id,
					proposal: e.Proposal[0]
					//timeId: e.Proposal[0].timeId
				});
			} else {
				callback({success: false});
				alert.alert('Error: \n', JSON.stringify(e));
			}
		});
	}
};

exports.updateProposalStatus = function(params, callback){
    Cloud.Objects.update({
        classname: 'Proposal',
        id: params.propId,
        fields:{
            ProposalStatus: params.status
        }
    }, function(e){
        if(e.success){
            callback({success: true});
        }
        else{
            callback({success: false});
        }
    });
};

exports.updateProposalRP = function(params, callback){
    Cloud.Objects.update({
        classname: 'Proposal',
        id: params.propId,
        fields:{
            rpID: params.rpID
        }
    }, function(e){
        if(e.success){
            callback({success: true});
        }
        else{
            callback({success: false});
        }
    });
};

exports.updateProposal = function (params,callback){
	if(params)
	{
	var row = params.row;
	Cloud.Objects.update({
			//session_id: globalVariables.GV.sessionId,
			classname : 'Proposal',
			id: row.ProposalId,
			//acl_id: row.acl_id,
			fields : {
				BusinessName : row.BusinessName,
				StreetAddress : row.StreetAddress,
				State : row.State,
				City : row.City,
				Zip : row.Zip,
				Contact : row.Contact,
				Phone : row.Phone,
				BusinessType: row.BusinessType,
				ProcessingMonths : row.ProcessingMonths,
				debitVol : parseFloat(row.debitVol).toFixed(2),
				aeVol : parseFloat(row.aeVol).toFixed(2),
				dsVol : parseFloat(row.dsVol).toFixed(2),
				mcVol : parseFloat(row.mcVol).toFixed(2),
				visaVol : parseFloat(row.visaVol).toFixed(2),
				debitTransactions : row.debitTransactions,
				aeTransactions : row.aeTransactions,
				dsTransactions : row.dsTransactions,
				mcTransactions : row.mcTransactions,
				visaTransactions : row.visaTransactions,
				debitAverageTicket : parseFloat(row.debitAverageTicket).toFixed(2),
				aeAverageTicket : parseFloat(row.aeAverageTicket).toFixed(2),
				dsAverageTicket : parseFloat(row.dsAverageTicket).toFixed(2),
				mcAverageTicket : parseFloat(row.mcAverageTicket).toFixed(2),
				visaAverageTicket : parseFloat(row.visaAverageTicket).toFixed(2),
				TotalCurrentFees : parseFloat(row.TotalCurrentFees).toFixed(2),
				CurrentEffectiveRate : parseFloat(row.CurrentEffectiveRate).toFixed(2),
				debitInterchangeFees : parseFloat(row.debitInterchangeFees).toFixed(2),
				aeInterchangeFees : parseFloat(row.aeInterchangeFees).toFixed(2),
				dsInterchangeFees : parseFloat(row.dsInterchangeFees).toFixed(2),
				mcInterchangeFees : parseFloat(row.mcInterchangeFees).toFixed(2),
				visaInterchangeFees : parseFloat(row.visaInterchangeFees).toFixed(2),
				debitProcessingFees : parseFloat(row.debitProcessingFees).toFixed(2),
				aeProcessingFees : parseFloat(row.aeProcessingFees).toFixed(2),
				dsProcessingFees : parseFloat(row.dsProcessingFees).toFixed(2),
				mcProcessingFees : parseFloat(row.mcProcessingFees).toFixed(2),
				visaProcessingFees : parseFloat(row.visaProcessingFees).toFixed(2),
				debitCardFees : parseFloat(row.debitCardFees).toFixed(2),
				aeCardFees : parseFloat(row.aeCardFees).toFixed(2),
				dsCardFees : parseFloat(row.dsCardFees).toFixed(2),
				mcCardFees : parseFloat(row.mcCardFees).toFixed(2),
				visaCardFees : parseFloat(row.visaCardFees).toFixed(2),
				TotalNewFees : parseFloat(row.TotalNewFees).toFixed(2),
				NewEffectiveRate : parseFloat(row.NewEffectiveRate).toFixed(2),
				MonthlySavings : parseFloat(row.MonthlySavings).toFixed(2),
				Year1Savings : parseFloat(row.Year1Savings).toFixed(2),
				Year2Savings : parseFloat(row.Year2Savings).toFixed(2),
				Year3Savings : parseFloat(row.Year3Savings).toFixed(2),
				Year4Savings : parseFloat(row.Year4Savings).toFixed(2),
				ProcessingFee : parseFloat(row.ProcessingFee),
				AuthFee : parseFloat(row.AuthFee),
				PinDebitProcessingFee : parseFloat(row.PinDebitProcessingFee),
				PinDebitAuthFee : parseFloat(row.PinDebitAuthFee),
				MonthlyServiceFee : parseFloat(row.MonthlyServiceFee),
				IndustryComplinceFee : parseFloat(row.IndustryComplinceFee),
				TerminalFee : parseFloat(row.TerminalFee),
				MXGatewayFee : parseFloat(row.MXGatewayFee),
				DebitAccessFee : parseFloat(row.DebitAccessFee),
				//timeId: row.timeId,
				Notes: row.Notes,
				//LastUpdated: row.LastUpdated,
				//DateCreated: row.Date,
				ProposalStatus: row.ProposalStatus,
				rpID: row.rpID,
				sm_id: row.sm_id,
				tm_id: row.tm_id
			}
,
		}, function(e) {
			if (e.success) {
				//globalVariables.GV.ProposalId = e.Proposal[0].id;
				//alert.alert("Success", "Updated Successfully");
				callback({success: true,
					proposalId: e.Proposal[0].id,
					LastUpdated: e.Proposal[0].updated_at
					//timeId: e.Proposal[0].timeId
				});
			} else {
				callback({success: false});
				alert.alert('Error: \n', JSON.stringify(e));
			}
		});
		}
		else{
			Cloud.Objects.update({
			//session_id: globalVariables.GV.sessionId,
				classname : 'Proposal',
				id: globalVariables.GV.ProposalId,
				acl_id: globalVariables.GV.acl_id,
				fields : {
					BusinessName : globalVariables.GV.BusinessName,
					StreetAddress : globalVariables.GV.StreetAddress,
					State : globalVariables.GV.State,
					City : globalVariables.GV.City,
					Zip : globalVariables.GV.Zip,
					Contact : globalVariables.GV.Contact,
					Phone : globalVariables.GV.Phone,
					BusinessType: globalVariables.GV.BusinessType,
					ProcessingMonths : globalVariables.GV.ProcessingMonths,
					debitVol : parseFloat(globalVariables.GV.debitVol).toFixed(2),
					aeVol : parseFloat(globalVariables.GV.aeVol).toFixed(2),
					dsVol : parseFloat(globalVariables.GV.dsVol).toFixed(2),
					mcVol : parseFloat(globalVariables.GV.mcVol).toFixed(2),
					visaVol : parseFloat(globalVariables.GV.visaVol).toFixed(2),
					debitTransactions : globalVariables.GV.debitTransactions,
					aeTransactions : globalVariables.GV.aeTransactions,
					dsTransactions : globalVariables.GV.dsTransactions,
					mcTransactions : globalVariables.GV.mcTransactions,
					visaTransactions : globalVariables.GV.visaTransactions,
					debitAverageTicket : parseFloat(globalVariables.GV.debitAverageTicket).toFixed(2),
					aeAverageTicket : parseFloat(globalVariables.GV.aeAverageTicket).toFixed(2),
					dsAverageTicket : parseFloat(globalVariables.GV.dsAverageTicket).toFixed(2),
					mcAverageTicket : parseFloat(globalVariables.GV.mcAverageTicket).toFixed(2),
					visaAverageTicket : parseFloat(globalVariables.GV.visaAverageTicket).toFixed(2),
					TotalCurrentFees : parseFloat(globalVariables.GV.TotalCurrentFees).toFixed(2),
					CurrentEffectiveRate : parseFloat(globalVariables.GV.CurrentEffectiveRate).toFixed(2),
					debitInterchangeFees : parseFloat(globalVariables.GV.debitInterchangeFees).toFixed(2),
					aeInterchangeFees : parseFloat(globalVariables.GV.aeInterchangeFees).toFixed(2),
					dsInterchangeFees : parseFloat(globalVariables.GV.dsInterchangeFees).toFixed(2),
					mcInterchangeFees : parseFloat(globalVariables.GV.mcInterchangeFees).toFixed(2),
					visaInterchangeFees : parseFloat(globalVariables.GV.visaInterchangeFees).toFixed(2),
					debitProcessingFees : parseFloat(globalVariables.GV.debitProcessingFees).toFixed(2),
					aeProcessingFees : parseFloat(globalVariables.GV.aeProcessingFees).toFixed(2),
					dsProcessingFees : parseFloat(globalVariables.GV.dsProcessingFees).toFixed(2),
					mcProcessingFees : parseFloat(globalVariables.GV.mcProcessingFees).toFixed(2),
					visaProcessingFees : parseFloat(globalVariables.GV.visaProcessingFees).toFixed(2),
					debitCardFees : parseFloat(globalVariables.GV.debitCardFees).toFixed(2),
					aeCardFees : parseFloat(globalVariables.GV.aeCardFees).toFixed(2),
					dsCardFees : parseFloat(globalVariables.GV.dsCardFees).toFixed(2),
					mcCardFees : parseFloat(globalVariables.GV.mcCardFees).toFixed(2),
					visaCardFees : parseFloat(globalVariables.GV.visaCardFees).toFixed(2),
					TotalNewFees : parseFloat(globalVariables.GV.TotalNewFees).toFixed(2),
					NewEffectiveRate : parseFloat(globalVariables.GV.NewEffectiveRate).toFixed(2),
					MonthlySavings : parseFloat(globalVariables.GV.MonthlySavings).toFixed(2),
					Year1Savings : parseFloat(globalVariables.GV.Year1Savings).toFixed(2),
					Year2Savings : parseFloat(globalVariables.GV.Year2Savings).toFixed(2),
					Year3Savings : parseFloat(globalVariables.GV.Year3Savings).toFixed(2),
					Year4Savings : parseFloat(globalVariables.GV.Year4Savings).toFixed(2),
					ProcessingFee : parseFloat(globalVariables.GV.ProcessingFee),
					AuthFee : parseFloat(globalVariables.GV.AuthFee),
					PinDebitProcessingFee : parseFloat(globalVariables.GV.PinDebitProcessingFee),
					PinDebitAuthFee : parseFloat(globalVariables.GV.PinDebitAuthFee),
					MonthlyServiceFee : parseFloat(globalVariables.GV.MonthlyServiceFee),
					IndustryComplinceFee : parseFloat(globalVariables.GV.IndustryComplinceFee),
					TerminalFee : parseFloat(globalVariables.GV.TerminalFee),
					MXGatewayFee : parseFloat(globalVariables.GV.MXGatewayFee),
					DebitAccessFee : parseFloat(globalVariables.GV.DebitAccessFee),
					//timeId: globalVariables.GV.timeId,
					Notes: globalVariables.GV.Notes,
					//LastUpdated: globalVariables.GV.LastUpdated,
					//DateCreated: globalVariables.GV.DateCreated,
					ProposalStatus: globalVariables.GV.ProposalStatus,
					rpID: globalVariables.GV.rpID,
					sm_id: globalVariables.GV.sm_id,
					tm_id: globalVariables.GV.tm_id,
			}

		}, function(e) {
			if (e.success) {
				globalVariables.GV.ProposalId = e.Proposal[0].id;
				alert.alert("Success", "Updated Successfully");
				callback({success: true,
					proposalId: e.Proposal[0].id,
					proposals: e.Proposal
					//timeId: e.Proposal[0].timeId
				});
			} else {
				callback({success: false});
				alert.alert('Error: \n', JSON.stringify(e));
			}
		});
		}
};

function queryFiles(skip, queryResults, callback){
	var queryParams = null;
	//var requestURL = null;
	Ti.API.info('QUERY FILES FUNCTION LASTFILESYNCDATE:  '+ globalVariables.GV.lastFileSyncDate);
	if(globalVariables.GV.lastFileSyncDate==0)//||globalVariables.GV.localFileIds.length==0)
	{
		queryParams={
			// per_page: 20,
			// page: pageNum||1
			limit: 20,
			skip: skip||0
		};
		// requestURL = 'https://api.cloud.appcelerator.com/v1/files/query.json?key=ZjxblkhEN42zd6WdS2XML4cwLJi8xCn0&pretty_json=true&count=true&where={"folder":"Pitch Book"}';//queryParams={};
	}
	else{
		//requestURL = 'https://api.cloud.appcelerator.com/v1/files/query.json?key=ZjxblkhEN42zd6WdS2XML4cwLJi8xCn0&pretty_json=true&count=true&where="$gt":'+globalVariables.GV.lastFileSyncDate;
		queryParams={
			limit: 20,
			skip: skip||0,
			//page: pageNum||1,
			where: {
				updated_at: {"$gt": globalVariables.GV.lastFileSyncDate}
			}
		};
	}
	Cloud.Files.query(queryParams, function(e) {
		//callback(e);
		if (e.success) {
			var results = [];
			Ti.API.info('FILES RESULT:  ' + JSON.stringify(e));
			for(var i=0; i<e.files.length;i++){
				//var localFolder = e.files[i].custom_fields.folder;
				//localFolder.replace(" ","");
				Ti.API.info("FILE:  "+JSON.stringify(e.files[i]));
				
				queryResults.push({
					filepath: e.files[i].id+".pdf",//Ti.Filesystem.applicationDataDirectory+e.files[i].id+".pdf",
					url: e.files[i].url,
					id: e.files[i].id,
					updated_at: e.files[i].updated_at,
					folder: e.files[i].custom_fields.folder,
					name: e.files[i].name
				});
			}
			
			var newSkip = skip+e.files.length;
			
			if(newSkip < e.meta.total_results){
				//pageNum=pageNum+1;
				queryFiles(newSkip, queryResults, callback);
			}
			else
			{
				callback({
					results: queryResults
				});
			}
		}
	});						
}

exports.getFiles = function(callback) {
					
	queryFiles(0,[],function(e){
		var downloadQueue = e.results;
		if(downloadQueue.length>0){
				
			var _callBack_DownloadOneFileFinished = function(download_result) {
				// if( typeof (download_result) !== 'undefined') {
					// _image.image = Titanium.Filesystem.getFile(download_result.path);
					// Ti.API.info('View this image: ' + download_result.path);
				// }
				callback({
					success: true,
					results: downloadQueue
				});
			};
				
			//var _callBack_DownloadMultipleFileFinished = function() {
				//callback({
					//success: true,
					//results: downloadQueue
				//});
			//};
				
			//utility.downloadMultiFile(downloadQueue, _callBack_DownloadOneFileFinished, _callBack_DownloadMultipleFileFinished);
			callback({
				success: true,
				results: downloadQueue
			});
		}
		else{
			callback({
				success: true,
				results: downloadQueue
			});
		}
	});
				
		// } 
		// else {
			// Ti.API.error('Error:\n' + ((e.error && e.message) || JSON.stringify(e)));
		// }
	//});
};

exports.isLoggedIn = function(callback) {
	if(globalVariables.GV.sessionId) {
    	Cloud.sessionId = globalVariables.GV.sessionId;
    	globalVariables.GV.cloudSessionSet=true;
    	//Ti.App.Properties.
        var me = Cloud.Users.showMe(function(e) {
        	if(e.success){
        		var user = e.users[0];
        		if(user.id===globalVariables.GV.userId)
        		{
        			//loggedIn = true;
        			callback({loggedIn: true});
        		}
        	}
            else
            {
            	callback({loggedIn: false});
            }
        });    
    } 
    else {
        callback({loggedIn: false});
    }
};

exports.getRates= function(callback){
	Cloud.Objects.query({
		classname: "businessType"
	}, function(e){
		if(e.success){
			callback({
				success: e.success,
				results: e.businessType
			});
		}
		else{
			callback({
				success: e.success,
				results: e.message
			});
		}
	});
};


///////////////////////////////////////////////

exports.updateTmid = function(callback){
	Cloud.Objects.query({
		classname: "Proposal",
		limit: 1000,
		where:{
			user_id: "5413462519bea20856021b7f",
			tm_id: ""
		}
	}, function(f){
		if(f.success){
			var dataArray = f.Proposal;
			var success=true;
			function uploader(i){
				if(i<dataArray.length){
					if(dataArray[i].tm_id==""){
						Cloud.Objects.update({
							classname: "Proposal",
							id: dataArray[i].id,
							fields: {
								tm_id: "534c4162891fdf60ae02b83a"
							}
						}, function(e){
							if(e.success){
								Ti.API.info("UPDATED TM_ID FOR: " + dataArray[i].BusinessName);
								uploader(i+1);
							}
							else{
								Ti.API.info("PROBLEM UPDATING TM_ID FOR: " + dataArray[i].BusinessName);
								success = false;
								uploader(dataArray.length);
							}
						});
					}
				}
				else{
					callback({
						success: success
					});
				}
			};
						
			uploader(0);
		}
	});
};

/////test user reassign

exports.updateOwner = function(){
    Cloud.Objects.update({
        id: globalVariables.GV.ProposalId,
        classname: "Proposal",
        fields:{
            user_id: "5356aa251316e90da8105fcc"
        }
        
    }, function(e){
        if(e.success){
            alert('USER ID UPDATED GO CHECK');
        }
        else{
            Ti.API.error("THERE WAS A PROBLEM:    " + JSON.stringify(e));
        }
    });
};

// test deleteByUID
exports.deleteAllByUID = function(uid){
    Cloud.Objects.query({
       classname : 'Proposal',
        //page : 1,
        //per_page : 10,
        limit: 1000,
        where:{
            user_id: uid
        }
    }, function(e) {
        if(e.success){
            
            function recursiveDelete(i){
                if(i<e.meta.total_results){
                    var propID = e.Proposal[i].id;
                    var bname = e.Proposal[i].BusinessName;
                    Cloud.Objects.remove({
                        classname: "Proposal",
                        id: propID
                    }, function(f){
                        if(f.success){
                            Ti.API.info(bname+":   DELETED");
                            recursiveDelete(i+1);
                        }
                        else{
                            alert(f.message);
                            i=e.meta.total_results;
                        }
                    });
                }
            }
            
            recursiveDelete(0);
        } 
    });
};

// update all items to add a delete field

exports.addDelField = function(){
    Cloud.Objects.query({
       classname : 'Proposal',
        //page : 1,
        //per_page : 10,
        limit: 1000,
    }, function(e) {
        if(e.success){
            function recursiveUpdate(i){
                if(i<e.meta.total_results){
                    var propID = e.Proposal[i].id;
                    var bname = e.Proposal[i].BusinessName;
                    Cloud.Objects.update({
                        classname: "Proposal",
                        id: propID.toString(),
                        fields:{
                            Deleted: 0
                        }
                    }, function(f){
                        if(f.success){
                            Ti.API.info(bname+"           DELETE Field added");
                            recursiveUpdate(i+1);
                        }
                        else{
                            Ti.API.info(JSON.stringify(f));
                            recursiveUpdate(i+1);
                            //i=e.meta.total_results;
                        }
                    });
                }
            }
            
            recursiveUpdate(0);
        }
    }); 
};
